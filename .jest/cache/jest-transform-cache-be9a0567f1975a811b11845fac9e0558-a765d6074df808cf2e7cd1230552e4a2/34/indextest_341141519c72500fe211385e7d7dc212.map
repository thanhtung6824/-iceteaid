{"version":3,"sources":["/home/admin1/Desktop/@iceteaid/packages/core/test/api/user/index.test.ts"],"names":[],"mappings":";;;;;AAAA;;;;AAGA,IAAA,MAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,QAAQ,CAAC,uCAAD,EAA0C,YAAA;AAC9C,MAAM,OAAO,GAAG,IAAI,OAAA,CAAA,OAAJ,CAAY,KAAZ,CAAhB;AACA,MAAM,OAAO,GAAG,IAAI,MAAA,CAAA,OAAJ,CAAY,OAAZ,CAAhB;AAEA,EAAA,EAAE,CAAE,eAAF,EAAmB,YAAA;AACjB,QAAM,QAAQ,GAAG,IAAI,CAAC,EAAL,EAAjB;AACA,IAAA,OAAO,CAAC,WAAR,CAAoB,IAApB,GAA2B,QAA3B;AACA,IAAA,OAAO,CAAC,qBAAR;AACA,IAAA,MAAM,CAAC,QAAD,CAAN,CAAiB,eAAjB,CAAiC,CAAjC;AACH,GALC,CAAF;AAMH,CAVO,CAAR;AAYA,QAAQ,CAAC,2BAAD,EAA8B,YAAA;AAClC,MAAM,OAAO,GAAG,IAAI,OAAA,CAAA,OAAJ,CAAY,KAAZ,CAAhB;AACA,MAAM,OAAO,GAAG,IAAI,MAAA,CAAA,OAAJ,CAAY,OAAZ,CAAhB;AAEA,EAAA,EAAE,CAAE,0BAAF,EAA8B,YAAA;AAC5B,QAAM,QAAQ,GAAG,IAAI,CAAC,EAAL,EAAjB;AACA,IAAA,OAAO,CAAC,WAAR,CAAoB,IAApB,GAA2B,QAA3B;AACA,IAAA,OAAO,CAAC,UAAR,CAAmB,KAAnB,EAA0B,KAA1B;AACA,IAAA,MAAM,CAAC,QAAD,CAAN,CAAiB,eAAjB,CAAiC,CAAjC;AACH,GALC,CAAF;AAMA,EAAA,EAAE,CAAE,qCAAF,EAAyC,YAAA;AACvC,QAAI;AACA,MAAA,OAAO,CAAC,UAAR,CAAmB,EAAnB,EAAuB,EAAvB;AACH,KAFD,CAEE,OAAO,GAAP,EAAY;AACV,MAAA,MAAM,CAAC,GAAG,CAAC,OAAL,CAAN,CAAoB,IAApB,CAAyB,uEAAzB;AACA,MAAA,MAAM,CAAC,GAAD,CAAN,CAAY,cAAZ,CAA2B,KAA3B;AACH;AACJ,GAPC,CAAF;AASA,EAAA,EAAE,CAAE,0DAAF,EAA8D,YAAA;AAC5D,QAAI;AACA,MAAA,OAAO,CAAC,UAAR,CAAmB,KAAnB,EAA0B,EAA1B;AACA,MAAA,MAAM,CAAC,IAAD,CAAN,CAAa,IAAb,CAAkB,KAAlB;AACH,KAHD,CAGE,OAAO,GAAP,EAAY;AACV,MAAA,MAAM,CAAC,GAAG,CAAC,OAAL,CAAN,CAAoB,IAApB,CAAyB,0EAAzB;AACA,MAAA,MAAM,CAAC,GAAD,CAAN,CAAY,cAAZ,CAA2B,KAA3B;AACH;AACJ,GARC,CAAF;AAUA,EAAA,EAAE,CAAE,+DAAF,EAAmE,YAAA;AACjE,QAAI;AACA,MAAA,OAAO,CAAC,UAAR,CAAmB,EAAnB,EAAuB,KAAvB;AACA,MAAA,MAAM,CAAC,IAAD,CAAN,CAAa,IAAb,CAAkB,KAAlB;AACH,KAHD,CAGE,OAAO,GAAP,EAAY;AACV,MAAA,MAAM,CAAC,GAAG,CAAC,OAAL,CAAN,CAAoB,IAApB,CAAyB,uEAAzB;AACA,MAAA,MAAM,CAAC,GAAD,CAAN,CAAY,cAAZ,CAA2B,KAA3B;AACH;AACJ,GARC,CAAF;AASH,CAtCO,CAAR;AAwCA,QAAQ,CAAC,2BAAD,EAA8B,YAAA;AAClC,MAAM,OAAO,GAAG,IAAI,OAAA,CAAA,OAAJ,CAAY,KAAZ,CAAhB;AACA,MAAM,OAAO,GAAG,IAAI,MAAA,CAAA,OAAJ,CAAY,OAAZ,CAAhB;AAEA,EAAA,EAAE,CAAE,0BAAF,EAA8B,YAAA;AAC5B,QAAM,QAAQ,GAAG,IAAI,CAAC,EAAL,EAAjB;AACA,IAAA,OAAO,CAAC,WAAR,CAAoB,IAApB,GAA2B,QAA3B;AACA,IAAA,OAAO,CAAC,UAAR,CAAmB,KAAnB,EAA0B,KAA1B;AACA,IAAA,MAAM,CAAC,QAAD,CAAN,CAAiB,eAAjB,CAAiC,CAAjC;AACH,GALC,CAAF;AAMA,EAAA,EAAE,CAAE,qCAAF,EAAyC,YAAA;AACvC,QAAI;AACA,MAAA,OAAO,CAAC,UAAR,CAAmB,EAAnB,EAAuB,EAAvB;AACH,KAFD,CAEE,OAAO,GAAP,EAAY;AACV,MAAA,MAAM,CAAC,GAAG,CAAC,OAAL,CAAN,CAAoB,IAApB,CAAyB,uEAAzB;AACA,MAAA,MAAM,CAAC,GAAD,CAAN,CAAY,cAAZ,CAA2B,KAA3B;AACH;AACJ,GAPC,CAAF;AASA,EAAA,EAAE,CAAE,0DAAF,EAA8D,YAAA;AAC5D,QAAI;AACA,MAAA,OAAO,CAAC,UAAR,CAAmB,KAAnB,EAA0B,EAA1B;AACA,MAAA,MAAM,CAAC,IAAD,CAAN,CAAa,IAAb,CAAkB,KAAlB;AACH,KAHD,CAGE,OAAO,GAAP,EAAY;AACV,MAAA,MAAM,CAAC,GAAG,CAAC,OAAL,CAAN,CAAoB,IAApB,CAAyB,0EAAzB;AACA,MAAA,MAAM,CAAC,GAAD,CAAN,CAAY,cAAZ,CAA2B,KAA3B;AACH;AACJ,GARC,CAAF;AAUA,EAAA,EAAE,CAAE,+DAAF,EAAmE,YAAA;AACjE,QAAI;AACA,MAAA,OAAO,CAAC,UAAR,CAAmB,EAAnB,EAAuB,KAAvB;AACA,MAAA,MAAM,CAAC,IAAD,CAAN,CAAa,IAAb,CAAkB,KAAlB;AACH,KAHD,CAGE,OAAO,GAAP,EAAY;AACV,MAAA,MAAM,CAAC,GAAG,CAAC,OAAL,CAAN,CAAoB,IAApB,CAAyB,uEAAzB;AACA,MAAA,MAAM,CAAC,GAAD,CAAN,CAAY,cAAZ,CAA2B,KAA3B;AACH;AACJ,GARC,CAAF;AASH,CAtCO,CAAR;AAwCA,QAAQ,CAAC,uBAAD,EAA0B,YAAA;AAC9B,MAAM,OAAO,GAAG,IAAI,OAAA,CAAA,OAAJ,CAAY,KAAZ,CAAhB;AACA,MAAM,OAAO,GAAG,IAAI,MAAA,CAAA,OAAJ,CAAY,OAAZ,CAAhB;AAEA,EAAA,EAAE,CAAE,eAAF,EAAmB,YAAA;AACjB,QAAM,QAAQ,GAAG,IAAI,CAAC,EAAL,EAAjB;AACA,IAAA,OAAO,CAAC,WAAR,CAAoB,IAApB,GAA2B,QAA3B;AACA,IAAA,OAAO,CAAC,MAAR;AACA,IAAA,MAAM,CAAC,QAAD,CAAN,CAAiB,eAAjB,CAAiC,CAAjC;AACH,GALC,CAAF;AAMH,CAVO,CAAR;AAYA,QAAQ,CAAC,2BAAD,EAA8B,YAAA;AAClC,MAAM,OAAO,GAAG,IAAI,OAAA,CAAA,OAAJ,CAAY,KAAZ,CAAhB;AACA,MAAM,OAAO,GAAG,IAAI,MAAA,CAAA,OAAJ,CAAY,OAAZ,CAAhB;AAEA,EAAA,EAAE,CAAE,4CAAF,EAAgD,YAAA;AAC9C,QAAM,QAAQ,GAAG,IAAI,CAAC,EAAL,EAAjB;AACA,IAAA,OAAO,CAAC,WAAR,CAAoB,IAApB,GAA2B,QAA3B;AACA,IAAA,OAAO,CAAC,UAAR,CAAmB,EAAnB,EAAuB,KAAvB;AACA,IAAA,MAAM,CAAC,QAAD,CAAN,CAAiB,eAAjB,CAAiC,CAAjC;AACA,IAAA,OAAO,CAAC,UAAR,CAAmB,KAAnB,EAA0B,KAA1B;AACA,IAAA,MAAM,CAAC,QAAD,CAAN,CAAiB,eAAjB,CAAiC,CAAjC;AACA,IAAA,OAAO,CAAC,UAAR,CAAmB,KAAnB,EAA0B,EAA1B;AACA,IAAA,MAAM,CAAC,QAAD,CAAN,CAAiB,eAAjB,CAAiC,CAAjC;AACH,GATC,CAAF;AAWA,EAAA,EAAE,CAAE,qCAAF,EAAyC,YAAA;AACvC,QAAI;AACA,MAAA,OAAO,CAAC,UAAR;AACA,MAAA,MAAM,CAAC,IAAD,CAAN,CAAa,IAAb,CAAkB,KAAlB;AACH,KAHD,CAGE,OAAO,GAAP,EAAY;AACV,MAAA,MAAM,CAAC,GAAG,CAAC,OAAL,CAAN,CAAoB,IAApB,CAAyB,kFAAzB;AACA,MAAA,MAAM,CAAC,GAAD,CAAN,CAAY,cAAZ,CAA2B,KAA3B;AACH;AACJ,GARC,CAAF;AASH,CAxBO,CAAR;AA0BA,QAAQ,CAAC,4BAAD,EAA+B,YAAA;AACnC,MAAM,OAAO,GAAG,IAAI,OAAA,CAAA,OAAJ,CAAY,KAAZ,CAAhB;AACA,MAAM,OAAO,GAAG,IAAI,MAAA,CAAA,OAAJ,CAAY,OAAZ,CAAhB;AAEA,EAAA,EAAE,CAAE,eAAF,EAAmB,YAAA;AACjB,QAAM,QAAQ,GAAG,IAAI,CAAC,EAAL,EAAjB;AACA,IAAA,OAAO,CAAC,WAAR,CAAoB,IAApB,GAA2B,QAA3B;AACA,IAAA,OAAO,CAAC,WAAR;AACA,IAAA,MAAM,CAAC,QAAD,CAAN,CAAiB,eAAjB,CAAiC,CAAjC;AACH,GALC,CAAF;AAMH,CAVO,CAAR;AAYA,QAAQ,CAAC,uCAAD,EAA0C,YAAA;AAC9C,MAAM,OAAO,GAAG,IAAI,OAAA,CAAA,OAAJ,CAAY,KAAZ,CAAhB;AACA,MAAM,OAAO,GAAG,IAAI,MAAA,CAAA,OAAJ,CAAY,OAAZ,CAAhB;AAEA,EAAA,EAAE,CAAE,eAAF,EAAmB,YAAA;AACjB,QAAM,QAAQ,GAAG,IAAI,CAAC,EAAL,EAAjB;AACA,IAAA,OAAO,CAAC,WAAR,CAAoB,IAApB,GAA2B,QAA3B;AACA,IAAA,OAAO,CAAC,oBAAR;AACA,IAAA,MAAM,CAAC,QAAD,CAAN,CAAiB,eAAjB,CAAiC,CAAjC;AACH,GALC,CAAF;AAMH,CAVO,CAAR","sourcesContent":["/**\n * @jest-environment jsdom\n */\nimport { UserApi } from '../../../src/api/user';\nimport { TestSdk } from '../../mocks';\n\ndescribe('Generate encryption key run correctly', () => {\n    const testSdk = new TestSdk('xxx');\n    const testApi = new UserApi(testSdk) as any;\n\n    it ('Run correctly', () => {\n        const mockPost = jest.fn();\n        testApi.transporter.post = mockPost;\n        testApi.generateEncryptionKey();\n        expect(mockPost).toBeCalledTimes(1);\n    });\n});\n\ndescribe('Encrypt key run correctly', () => {\n    const testSdk = new TestSdk('xxx');\n    const testApi = new UserApi(testSdk) as any;\n\n    it ('Work when pass parameter', () => {\n        const mockPost = jest.fn();\n        testApi.transporter.post = mockPost;\n        testApi.encryptKey('abc', 'def');\n        expect(mockPost).toBeCalledTimes(1);\n    });\n    it ('Throw error when not pass parameter', () => {\n        try {\n            testApi.encryptKey('', '');\n        } catch (err) {\n            expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter PRIVATE_KEY is required');\n            expect(err).toBeInstanceOf(Error);\n        }\n    });\n\n    it ('Throw error when pass private key but not encryption key', () => {\n        try {\n            testApi.encryptKey('abc', '');\n            expect(true).toBe(false);\n        } catch (err) {\n            expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter ENCRYPTION_KEY is required');\n            expect(err).toBeInstanceOf(Error);\n        }\n    });\n\n    it ('Throw error when not pass private key but pass encryption key', () => {\n        try {\n            testApi.encryptKey('', 'abc');\n            expect(true).toBe(false);\n        } catch (err) {\n            expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter PRIVATE_KEY is required');\n            expect(err).toBeInstanceOf(Error);\n        }\n    });\n});\n\ndescribe('Decrypt key run correctly', () => {\n    const testSdk = new TestSdk('xxx');\n    const testApi = new UserApi(testSdk) as any;\n\n    it ('Work when pass parameter', () => {\n        const mockPost = jest.fn();\n        testApi.transporter.post = mockPost;\n        testApi.decryptKey('abc', 'def');\n        expect(mockPost).toBeCalledTimes(1);\n    });\n    it ('Throw error when not pass parameter', () => {\n        try {\n            testApi.decryptKey('', '');\n        } catch (err) {\n            expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter PRIVATE_KEY is required');\n            expect(err).toBeInstanceOf(Error);\n        }\n    });\n\n    it ('Throw error when pass private key but not encryption key', () => {\n        try {\n            testApi.decryptKey('abc', '');\n            expect(true).toBe(false);\n        } catch (err) {\n            expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter ENCRYPTION_KEY is required');\n            expect(err).toBeInstanceOf(Error);\n        }\n    });\n\n    it ('Throw error when not pass private key but pass encryption key', () => {\n        try {\n            testApi.decryptKey('', 'abc');\n            expect(true).toBe(false);\n        } catch (err) {\n            expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter PRIVATE_KEY is required');\n            expect(err).toBeInstanceOf(Error);\n        }\n    });\n});\n\ndescribe('Get key run correctly', () => {\n    const testSdk = new TestSdk('xxx');\n    const testApi = new UserApi(testSdk) as any;\n\n    it ('Run correctly', () => {\n        const mockPost = jest.fn();\n        testApi.transporter.post = mockPost;\n        testApi.getKey();\n        expect(mockPost).toBeCalledTimes(1);\n    });\n});\n\ndescribe('Update Info run correctly', () => {\n    const testSdk = new TestSdk('xxx');\n    const testApi = new UserApi(testSdk) as any;\n\n    it ('Run correctly when pass at least parameter', () => {\n        const mockPost = jest.fn();\n        testApi.transporter.post = mockPost;\n        testApi.updateInfo('', 'abc');\n        expect(mockPost).toBeCalledTimes(1);\n        testApi.updateInfo('abc', 'def');\n        expect(mockPost).toBeCalledTimes(2);\n        testApi.updateInfo('abc', '');\n        expect(mockPost).toBeCalledTimes(3);\n    });\n\n    it ('Throw error when not pass parameter', () => {\n        try {\n            testApi.updateInfo();\n            expect(true).toBe(false);\n        } catch (err) {\n            expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter AT_LEAST_ONE_PARAMETER is required');\n            expect(err).toBeInstanceOf(Error);\n        }\n    });\n});\n\ndescribe('Get metadata run correctly', () => {\n    const testSdk = new TestSdk('xxx');\n    const testApi = new UserApi(testSdk) as any;\n\n    it ('Run correctly', () => {\n        const mockPost = jest.fn();\n        testApi.transporter.post = mockPost;\n        testApi.getMetaData();\n        expect(mockPost).toBeCalledTimes(1);\n    });\n});\n\ndescribe('Get data after redirect run correctly', () => {\n    const testSdk = new TestSdk('xxx');\n    const testApi = new UserApi(testSdk) as any;\n\n    it ('Run correctly', () => {\n        const mockPost = jest.fn();\n        testApi.transporter.post = mockPost;\n        testApi.getDataAfterRedirect();\n        expect(mockPost).toBeCalledTimes(1);\n    });\n});\n"]}