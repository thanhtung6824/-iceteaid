d112398c035f56cc61f275e687a7a8d9
"use strict";

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

  __setModuleDefault(result, mod);

  return result;
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeIframe = void 0;

var react_1 = __importStar(require("react"));

var rxjs_1 = require("rxjs");

var iceteaid_core_1 = require("iceteaid-core");

var react_native_1 = require("react-native");

var react_native_webview_1 = require("react-native-webview");

var iceteaid_type_1 = require("iceteaid-type");

var operators_1 = require("rxjs/operators");

var NativeIframe =
/** @class */
function (_super) {
  __extends(NativeIframe, _super);

  function NativeIframe() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.iframe = null;
    _this.googleLoginId = '';

    _this.IFrame = function () {
      var _a = react_1.useState(false),
          open = _a[0],
          setOpen = _a[1];

      var os = react_native_1.Platform.OS;
      var webviewRef = react_1.useCallback(function (webView) {
        _this.iframe = webView;
      }, []);
      var openIframe = react_1.useCallback(function () {
        setOpen(true);
      }, []);
      var closeIframe = react_1.useCallback(function () {
        setOpen(false);
      }, []);
      var viewRef = react_1.useCallback(function () {
        _this.view = {
          openIframe: openIframe,
          closeIframe: closeIframe
        };
      }, []);

      var onMessage = function (event) {
        _this.transporter.handleMessage(event);
      };

      var handleWebViewNavigationStateChange = function (newNavState) {
        _this.handleWebViewNavigationStateChangeWrapper(newNavState);
      };

      return react_1.default.createElement(react_native_1.SafeAreaView, {
        testID: 'qwerty',
        ref: viewRef,
        style: [styles.container, open ? styles.showContainer : styles.hideContainer]
      }, react_1.default.createElement(react_native_webview_1.WebView, {
        testID: 'abcxyz',
        ref: webviewRef,
        startInLoadingState: true,
        javaScriptEnabled: true,
        source: {
          uri: _this.endpoint
        },
        onMessage: onMessage,
        userAgent: os === 'ios' ? 'Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/603.1.23 (KHTML, like Gecko) Version/10.0 Mobile/14E5239e Safari/602' : 'Mozilla/5.0 (Linux; Android 4.1.1; Galaxy Nexus Build/JRO03C) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Mobile Safari/535.19',
        onNavigationStateChange: handleWebViewNavigationStateChange
      }));
    };

    return _this;
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  NativeIframe.prototype.bootstrap = function () {};

  NativeIframe.prototype.openIframe = function () {
    if (this.view) {
      return this.view.openIframe();
    }

    throw iceteaid_core_1.viewIsNotReady();
  };

  NativeIframe.prototype.closeIframe = function () {
    if (this.view) {
      return this.view.closeIframe();
    }

    throw iceteaid_core_1.viewIsNotReady();
  };

  NativeIframe.prototype.postMessage = function (payload) {
    return __awaiter(this, void 0, void 0, function () {
      var message;
      return __generator(this, function (_a) {
        message = JSON.parse(payload);

        if (message.requestType === iceteaid_type_1.RequestType.LOGIN_WITH_GOOGLE) {
          this.view.openIframe();
          this.googleLoginId = message.id;
        }

        this.iframe.postMessage(payload);
        return [2
        /*return*/
        ];
      });
    });
  };

  NativeIframe.prototype.isReady = function () {
    var _this = this;

    return new Promise(function (resolve) {
      return __awaiter(_this, void 0, void 0, function () {
        var id, subject, timer;

        var _this = this;

        return __generator(this, function (_a) {
          id = iceteaid_core_1.randomId();
          subject = iceteaid_core_1.subjectBuilder(id, this.transporter.messageHandlers);
          timer = setInterval(function () {
            return __awaiter(_this, void 0, void 0, function () {
              var isOkay;

              var _this = this;

              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    if (!this.iframe) return [3
                    /*break*/
                    , 2];
                    this.iframe.postMessage(JSON.stringify({
                      id: id,
                      payload: 'Are u ready?',
                      requestType: iceteaid_type_1.RequestType.IS_READY
                    }));
                    return [4
                    /*yield*/
                    , rxjs_1.lastValueFrom(subject.asObservable().pipe(operators_1.filter(function (message) {
                      return !!message;
                    }), operators_1.take(1), operators_1.tap(function () {
                      _this.transporter.messageHandlers.delete(id);
                    })))];

                  case 1:
                    isOkay = _a.sent();

                    if (isOkay) {
                      clearInterval(timer);
                      resolve(isOkay);
                    }

                    _a.label = 2;

                  case 2:
                    return [2
                    /*return*/
                    ];
                }
              });
            });
          }, 1000);
          return [2
          /*return*/
          ];
        });
      });
    });
  };

  NativeIframe.prototype.handleWebViewNavigationStateChangeWrapper = function (newNavState) {
    var url = newNavState.url;
    if (!url) return;
    var returnUrl = new URL(url);
    var urlParams = new URLSearchParams(returnUrl.search);
    var credentials = urlParams.get('token');
    var existUser = urlParams.get('existUser');

    if (credentials && existUser && this.googleLoginId) {
      var token = JSON.parse(credentials);
      var subject = this.transporter.messageHandlers.get(this.googleLoginId);
      subject.next({
        payload: {
          token: token.access_token,
          existUser: existUser
        },
        id: this.googleLoginId
      });
      this.googleLoginId = '';
      this.view.closeIframe();
    }
  };

  return NativeIframe;
}(iceteaid_core_1.Iframe);

exports.NativeIframe = NativeIframe;
var styles = react_native_1.StyleSheet.create({
  container: {
    flex: 1,
    width: '100%',
    backgroundColor: 'transparent',
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  webview: {
    flex: 1,
    backgroundColor: 'transparent'
  },
  showContainer: {
    zIndex: 10000,
    elevation: 10000
  },
  hideContainer: {
    zIndex: -10000,
    elevation: -10000
  },
  activityIndicatorStyle: {
    flex: 1,
    justifyContent: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,