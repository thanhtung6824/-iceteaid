8da62c2942658358e901e5187ccb3a9d










'use strict';












var _NativeImageLoaderIOS = _interopRequireDefault(require("./NativeImageLoaderIOS"));

var _ImageViewNativeComponent = _interopRequireDefault(require("./ImageViewNativeComponent"));var _this = this,_jsxFileName = "/home/admin1/Desktop/@iceteaid/node_modules/react-native/Libraries/Image/Image.ios.js";function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _iterableToArrayLimit(arr, i) {if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}

function getSize(
uri,
success,
failure)
{
  _NativeImageLoaderIOS.default.getSize(uri).
  then(function (_ref) {var _ref2 = _slicedToArray(_ref, 2),width = _ref2[0],height = _ref2[1];return success(width, height);}).
  catch(
  failure ||
  function () {
    console.warn('Failed to get size for image ' + uri);
  });

}

function getSizeWithHeaders(
uri,
headers,
success,
failure)
{
  return _NativeImageLoaderIOS.default.getSizeWithHeaders(uri, headers).
  then(function (sizes) {
    success(sizes.width, sizes.height);
  }).
  catch(
  failure ||
  function () {
    console.warn('Failed to get size for image: ' + uri);
  });

}

function prefetch(url) {
  return _NativeImageLoaderIOS.default.prefetchImage(url);
}

function queryCache(
urls) {return regeneratorRuntime.async(function queryCache$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return regeneratorRuntime.awrap(

          _NativeImageLoaderIOS.default.queryCache(urls));case 2:return _context.abrupt("return", _context.sent);case 3:case "end":return _context.stop();}}}, null, null, null, Promise);}


















var Image = function Image(props, forwardedRef) {
  var source = require('./resolveAssetSource')(props.source) || {
    uri: undefined,
    width: undefined,
    height: undefined };


  var sources;
  var style;
  if (Array.isArray(source)) {

    style = require('../StyleSheet/flattenStyle')([styles.base, props.style]) || {};
    sources = source;
  } else {var
    _width = source.width,_height = source.height,uri = source.uri;

    style = require('../StyleSheet/flattenStyle')([{ width: _width, height: _height }, styles.base, props.style]) || {};
    sources = [source];

    if (uri === '') {
      console.warn('source.uri should not be an empty string');
    }
  }

  var resizeMode = props.resizeMode || style.resizeMode || 'cover';
  var tintColor = style.tintColor;

  if (props.src != null) {
    console.warn(
    'The <Image> component requires a `source` property rather than `src`.');

  }

  if (props.children != null) {
    throw new Error(
    'The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');

  }

  return (
    require('react').createElement(_ImageViewNativeComponent.default, _extends({},
    props, {
      ref: forwardedRef,
      style: style,
      resizeMode: resizeMode,
      tintColor: tintColor,
      source: sources, __self: _this, __source: { fileName: _jsxFileName, lineNumber: 127, columnNumber: 5 } })));


};

Image = require('react').forwardRef(


Image);
Image.displayName = 'Image';









Image.getSize = getSize;










Image.getSizeWithHeaders = getSizeWithHeaders;










Image.prefetch = prefetch;









Image.queryCache = queryCache;









Image.resolveAssetSource = require('./resolveAssetSource');




Image.propTypes = require('../DeprecatedPropTypes/DeprecatedImagePropType');

var styles = require('../StyleSheet/StyleSheet').create({
  base: {
    overflow: 'hidden' } });



module.exports = Image;