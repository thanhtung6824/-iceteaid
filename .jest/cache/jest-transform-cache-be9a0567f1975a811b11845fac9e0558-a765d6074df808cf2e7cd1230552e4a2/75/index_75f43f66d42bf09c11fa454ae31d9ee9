6c343c76092a4c8a4bf101bf35fe7c34
"use strict";

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserApi = void 0;

var base_api_1 = require("../base-api");

var iceteaid_type_1 = require("iceteaid-type");

var __1 = require("../..");

var UserApi =
/** @class */
function (_super) {
  __extends(UserApi, _super);

  function UserApi() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UserApi.prototype.generateEncryptionKey = function () {
    var payload = __1.queryBuilder(iceteaid_type_1.RequestType.GENERATE_ENCRYPTION_KEY, {});

    return this.transporter.post(this.iframe, payload);
  };

  UserApi.prototype.encryptKey = function (privateKey, encryptionKey, mnemonic) {
    if (!privateKey) {
      throw __1.missingParameter('PRIVATE_KEY');
    }

    if (!encryptionKey) {
      throw __1.missingParameter('ENCRYPTION_KEY');
    }

    var payload = __1.queryBuilder(iceteaid_type_1.RequestType.ENCRYPT_KEY, {
      privateKey: privateKey,
      encryptionKey: encryptionKey,
      mnemonic: mnemonic || ''
    });

    return this.transporter.post(this.iframe, payload);
  };

  UserApi.prototype.decryptKey = function (privateKey, encryptionKey, mnemonic) {
    if (!privateKey) {
      throw __1.missingParameter('PRIVATE_KEY');
    }

    if (!encryptionKey) {
      throw __1.missingParameter('ENCRYPTION_KEY');
    }

    var payload = __1.queryBuilder(iceteaid_type_1.RequestType.DECRYPT_KEY, {
      privateKey: privateKey,
      encryptionKey: encryptionKey,
      mnemonic: mnemonic || ''
    });

    return this.transporter.post(this.iframe, payload);
  };

  UserApi.prototype.getKey = function () {
    var payload = __1.queryBuilder(iceteaid_type_1.RequestType.GET_KEY, {});

    return this.transporter.post(this.iframe, payload);
  };

  UserApi.prototype.updateInfo = function (displayName, fullName) {
    if (!displayName && !fullName) {
      throw __1.missingParameter('AT_LEAST_ONE_PARAMETER');
    }

    var payload = __1.queryBuilder(iceteaid_type_1.RequestType.UPDATE_INFO, {
      displayName: displayName,
      fullName: fullName
    });

    return this.transporter.post(this.iframe, payload);
  };

  UserApi.prototype.getMetaData = function () {
    var payload = __1.queryBuilder(iceteaid_type_1.RequestType.GET_META_DATA, {});

    return this.transporter.post(this.iframe, payload);
  };

  UserApi.prototype.getDataAfterRedirect = function () {
    var payload = __1.queryBuilder(iceteaid_type_1.RequestType.WEB_GET_DATA_AFTER_REDIRECT, {});

    return this.transporter.post(this.iframe, payload);
  };

  return UserApi;
}(base_api_1.BaseApi);

exports.UserApi = UserApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FkbWluMS9EZXNrdG9wL0BpY2V0ZWFpZC9wYWNrYWdlcy9jb3JlL3NyYy9hcGkvdXNlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxVQUFBLEdBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQTs7QUFDQSxJQUFBLGVBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBOztBQUNBLElBQUEsR0FBQSxHQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUE7O0FBRUEsSUFBQSxPQUFBO0FBQUE7QUFBQSxVQUFBLE1BQUEsRUFBQTtBQUE2QixFQUFBLFNBQUEsQ0FBQSxPQUFBLEVBQUEsTUFBQSxDQUFBOztBQUE3QixXQUFBLE9BQUEsR0FBQTs7QUFrREM7O0FBakRVLEVBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQSxxQkFBQSxHQUFQLFlBQUE7QUFDSSxRQUFNLE9BQU8sR0FBRyxHQUFBLENBQUEsWUFBQSxDQUFhLGVBQUEsQ0FBQSxXQUFBLENBQVksdUJBQXpCLEVBQWtELEVBQWxELENBQWhCOztBQUNBLFdBQU8sS0FBSyxXQUFMLENBQWlCLElBQWpCLENBQXNCLEtBQUssTUFBM0IsRUFBbUMsT0FBbkMsQ0FBUDtBQUNILEdBSE07O0FBS0EsRUFBQSxPQUFBLENBQUEsU0FBQSxDQUFBLFVBQUEsR0FBUCxVQUFrQixVQUFsQixFQUFzQyxhQUF0QyxFQUE2RCxRQUE3RCxFQUE4RTtBQUMxRSxRQUFJLENBQUMsVUFBTCxFQUFpQjtBQUNiLFlBQU0sR0FBQSxDQUFBLGdCQUFBLENBQWlCLGFBQWpCLENBQU47QUFDSDs7QUFDRCxRQUFJLENBQUMsYUFBTCxFQUFvQjtBQUNoQixZQUFNLEdBQUEsQ0FBQSxnQkFBQSxDQUFpQixnQkFBakIsQ0FBTjtBQUNIOztBQUNELFFBQU0sT0FBTyxHQUFHLEdBQUEsQ0FBQSxZQUFBLENBQWEsZUFBQSxDQUFBLFdBQUEsQ0FBWSxXQUF6QixFQUFzQztB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YXBpJztcbmltcG9ydCB7IFJlcXVlc3RUeXBlLCBSZXR1cm5UeXBlIH0gZnJvbSAnaWNldGVhaWQtdHlwZSc7XG5pbXBvcnQgeyBtaXNzaW5nUGFyYW1ldGVyLCBxdWVyeUJ1aWxkZXIgfSBmcm9tICcuLi8uLic7XG5cbmV4cG9ydCBjbGFzcyBVc2VyQXBpIGV4dGVuZHMgQmFzZUFwaSB7XG4gICAgcHVibGljIGdlbmVyYXRlRW5jcnlwdGlvbktleSgpOiBSZXR1cm5UeXBlPGFueT4ge1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gcXVlcnlCdWlsZGVyKFJlcXVlc3RUeXBlLkdFTkVSQVRFX0VOQ1JZUFRJT05fS0VZLCB7fSk7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydGVyLnBvc3QodGhpcy5pZnJhbWUsIHBheWxvYWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBlbmNyeXB0S2V5KHByaXZhdGVLZXk6IHN0cmluZywgZW5jcnlwdGlvbktleTogc3RyaW5nLCBtbmVtb25pYz86IHN0cmluZyk6IFJldHVyblR5cGU8YW55PiB7XG4gICAgICAgIGlmICghcHJpdmF0ZUtleSkge1xuICAgICAgICAgICAgdGhyb3cgbWlzc2luZ1BhcmFtZXRlcignUFJJVkFURV9LRVknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWVuY3J5cHRpb25LZXkpIHtcbiAgICAgICAgICAgIHRocm93IG1pc3NpbmdQYXJhbWV0ZXIoJ0VOQ1JZUFRJT05fS0VZJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHF1ZXJ5QnVpbGRlcihSZXF1ZXN0VHlwZS5FTkNSWVBUX0tFWSwgeyBwcml2YXRlS2V5LCBlbmNyeXB0aW9uS2V5LCBtbmVtb25pYzogbW5lbW9uaWMgfHwgJycgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydGVyLnBvc3QodGhpcy5pZnJhbWUsIHBheWxvYWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZWNyeXB0S2V5KHByaXZhdGVLZXk6IHN0cmluZywgZW5jcnlwdGlvbktleTogc3RyaW5nLCBtbmVtb25pYz86IHN0cmluZyk6IFJldHVyblR5cGU8YW55PiB7XG4gICAgICAgIGlmICghcHJpdmF0ZUtleSkge1xuICAgICAgICAgICAgdGhyb3cgbWlzc2luZ1BhcmFtZXRlcignUFJJVkFURV9LRVknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWVuY3J5cHRpb25LZXkpIHtcbiAgICAgICAgICAgIHRocm93IG1pc3NpbmdQYXJhbWV0ZXIoJ0VOQ1JZUFRJT05fS0VZJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHF1ZXJ5QnVpbGRlcihSZXF1ZXN0VHlwZS5ERUNSWVBUX0tFWSwgeyBwcml2YXRlS2V5LCBlbmNyeXB0aW9uS2V5LCBtbmVtb25pYzogbW5lbW9uaWMgfHwgJycgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydGVyLnBvc3QodGhpcy5pZnJhbWUsIHBheWxvYWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRLZXkoKTogUmV0dXJuVHlwZTxhbnk+IHtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHF1ZXJ5QnVpbGRlcihSZXF1ZXN0VHlwZS5HRVRfS0VZLCB7fSk7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydGVyLnBvc3QodGhpcy5pZnJhbWUsIHBheWxvYWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGVJbmZvKGRpc3BsYXlOYW1lPzogc3RyaW5nLCBmdWxsTmFtZT86IHN0cmluZyk6IFJldHVyblR5cGU8YW55PiB7XG4gICAgICAgIGlmICghZGlzcGxheU5hbWUgJiYgIWZ1bGxOYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBtaXNzaW5nUGFyYW1ldGVyKCdBVF9MRUFTVF9PTkVfUEFSQU1FVEVSJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHF1ZXJ5QnVpbGRlcihSZXF1ZXN0VHlwZS5VUERBVEVfSU5GTywgeyBkaXNwbGF5TmFtZSwgZnVsbE5hbWUgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydGVyLnBvc3QodGhpcy5pZnJhbWUsIHBheWxvYWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRNZXRhRGF0YSgpOiBSZXR1cm5UeXBlPGFueT4ge1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gcXVlcnlCdWlsZGVyKFJlcXVlc3RUeXBlLkdFVF9NRVRBX0RBVEEsIHt9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0ZXIucG9zdCh0aGlzLmlmcmFtZSwgcGF5bG9hZCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldERhdGFBZnRlclJlZGlyZWN0KCk6IFJldHVyblR5cGU8YW55PiB7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBxdWVyeUJ1aWxkZXIoUmVxdWVzdFR5cGUuV0VCX0dFVF9EQVRBX0FGVEVSX1JFRElSRUNULCB7fSk7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydGVyLnBvc3QodGhpcy5pZnJhbWUsIHBheWxvYWQpO1xuICAgIH1cbn0iXX0=