c91a77eeb5806abf2a33252ceb71a77d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @jest-environment jsdom
 */

var user_1 = require("../../../src/api/user");

var mocks_1 = require("../../mocks");

describe('Generate encryption key run correctly', function () {
  var testSdk = new mocks_1.TestSdk('xxx');
  var testApi = new user_1.UserApi(testSdk);
  it('Run correctly', function () {
    var mockPost = jest.fn();
    testApi.transporter.post = mockPost;
    testApi.generateEncryptionKey();
    expect(mockPost).toBeCalledTimes(1);
  });
});
describe('Encrypt key run correctly', function () {
  var testSdk = new mocks_1.TestSdk('xxx');
  var testApi = new user_1.UserApi(testSdk);
  it('Work when pass parameter', function () {
    var mockPost = jest.fn();
    testApi.transporter.post = mockPost;
    testApi.encryptKey('abc', 'def');
    expect(mockPost).toBeCalledTimes(1);
  });
  it('Throw error when not pass parameter', function () {
    try {
      testApi.encryptKey('', '');
    } catch (err) {
      expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter PRIVATE_KEY is required');
      expect(err).toBeInstanceOf(Error);
    }
  });
  it('Throw error when pass private key but not encryption key', function () {
    try {
      testApi.encryptKey('abc', '');
      expect(true).toBe(false);
    } catch (err) {
      expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter ENCRYPTION_KEY is required');
      expect(err).toBeInstanceOf(Error);
    }
  });
  it('Throw error when not pass private key but pass encryption key', function () {
    try {
      testApi.encryptKey('', 'abc');
      expect(true).toBe(false);
    } catch (err) {
      expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter PRIVATE_KEY is required');
      expect(err).toBeInstanceOf(Error);
    }
  });
});
describe('Decrypt key run correctly', function () {
  var testSdk = new mocks_1.TestSdk('xxx');
  var testApi = new user_1.UserApi(testSdk);
  it('Work when pass parameter', function () {
    var mockPost = jest.fn();
    testApi.transporter.post = mockPost;
    testApi.decryptKey('abc', 'def');
    expect(mockPost).toBeCalledTimes(1);
  });
  it('Throw error when not pass parameter', function () {
    try {
      testApi.decryptKey('', '');
    } catch (err) {
      expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter PRIVATE_KEY is required');
      expect(err).toBeInstanceOf(Error);
    }
  });
  it('Throw error when pass private key but not encryption key', function () {
    try {
      testApi.decryptKey('abc', '');
      expect(true).toBe(false);
    } catch (err) {
      expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter ENCRYPTION_KEY is required');
      expect(err).toBeInstanceOf(Error);
    }
  });
  it('Throw error when not pass private key but pass encryption key', function () {
    try {
      testApi.decryptKey('', 'abc');
      expect(true).toBe(false);
    } catch (err) {
      expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter PRIVATE_KEY is required');
      expect(err).toBeInstanceOf(Error);
    }
  });
});
describe('Get key run correctly', function () {
  var testSdk = new mocks_1.TestSdk('xxx');
  var testApi = new user_1.UserApi(testSdk);
  it('Run correctly', function () {
    var mockPost = jest.fn();
    testApi.transporter.post = mockPost;
    testApi.getKey();
    expect(mockPost).toBeCalledTimes(1);
  });
});
describe('Update Info run correctly', function () {
  var testSdk = new mocks_1.TestSdk('xxx');
  var testApi = new user_1.UserApi(testSdk);
  it('Run correctly when pass at least parameter', function () {
    var mockPost = jest.fn();
    testApi.transporter.post = mockPost;
    testApi.updateInfo('', 'abc');
    expect(mockPost).toBeCalledTimes(1);
    testApi.updateInfo('abc', 'def');
    expect(mockPost).toBeCalledTimes(2);
    testApi.updateInfo('abc', '');
    expect(mockPost).toBeCalledTimes(3);
  });
  it('Throw error when not pass parameter', function () {
    try {
      testApi.updateInfo();
      expect(true).toBe(false);
    } catch (err) {
      expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter AT_LEAST_ONE_PARAMETER is required');
      expect(err).toBeInstanceOf(Error);
    }
  });
});
describe('Get metadata run correctly', function () {
  var testSdk = new mocks_1.TestSdk('xxx');
  var testApi = new user_1.UserApi(testSdk);
  it('Run correctly', function () {
    var mockPost = jest.fn();
    testApi.transporter.post = mockPost;
    testApi.getMetaData();
    expect(mockPost).toBeCalledTimes(1);
  });
});
describe('Get data after redirect run correctly', function () {
  var testSdk = new mocks_1.TestSdk('xxx');
  var testApi = new user_1.UserApi(testSdk);
  it('Run correctly', function () {
    var mockPost = jest.fn();
    testApi.transporter.post = mockPost;
    testApi.getDataAfterRedirect();
    expect(mockPost).toBeCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,