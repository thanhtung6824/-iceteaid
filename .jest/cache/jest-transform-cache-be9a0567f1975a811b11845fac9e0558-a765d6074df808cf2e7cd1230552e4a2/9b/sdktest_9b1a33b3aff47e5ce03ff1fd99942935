4ebcf65a4fd9f74fd8328e5c300d6ef3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @jest-environment jsdom
 */

var mocks_1 = require("../mocks");

var user_1 = require("../../src/api/user");

var auth_1 = require("../../src/api/auth");

var mocks_2 = require("../mocks");

describe('Initialize IceteaId', function () {
  it('Get instance will return instance if it set', function () {
    expect(mocks_1.TestSdk.instance).not.toBeDefined();
    var testSdk = mocks_1.TestSdk.getInstance('xxx');
    expect(testSdk).toBeInstanceOf(mocks_1.TestSdk);
    expect(mocks_1.TestSdk.instance).toBeInstanceOf(mocks_1.TestSdk);
  });
  it('Initialize correctly', function () {
    var testSdk = new mocks_1.TestSdk('xxx');
    var expectedSdkId = {
      apiKey: 'xxx',
      target: 'web',
      baseUrl: 'http://3k.theydont.work'
    };
    expect(JSON.stringify(expectedSdkId)).toBe(atob(testSdk.sdkId));
    expect(testSdk.user).toBeInstanceOf(user_1.UserApi);
    expect(testSdk.auth).toBeInstanceOf(auth_1.AuthApi);
    expect(mocks_1.TestSdk.getInstance('xxx')).toBeInstanceOf(mocks_1.TestSdk);
    expect(testSdk.iframe).toBeInstanceOf(mocks_2.TestIframe);
    expect(testSdk.transporter).toBeInstanceOf(mocks_2.TestTransporter);
  });
  it('Initialize without apikey will throw err', function () {
    try {
      new mocks_1.TestSdk();
      expect(true).toBe(false);
    } catch (err) {
      expect(err.message).toBe('IceteaID Error: [MISSING_API_KEY] You must provide a api key');
      expect(err).toBeInstanceOf(Error);
    }
  });
  it('Is same instance between each call', function () {
    var testSdk = new mocks_1.TestSdk('xxx');
    var testSdk2 = new mocks_1.TestSdk('aaa');
    var testSdk3 = new mocks_1.TestSdk('xxx');
    expect(testSdk.iframe).toBe(testSdk3.iframe);
    expect(testSdk.iframe).not.toBe(testSdk2.iframe);
    expect(testSdk.transporter).toBe(testSdk3.transporter);
    expect(testSdk.transporter).not.toBe(testSdk2.transporter);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FkbWluMS9EZXNrdG9wL0BpY2V0ZWFpZC9wYWNrYWdlcy9jb3JlL3Rlc3QvcHJvdmlkZXIvc2RrLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7OztBQUdBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUE7O0FBQ0EsSUFBQSxNQUFBLEdBQUEsT0FBQSxDQUFBLG9CQUFBLENBQUE7O0FBQ0EsSUFBQSxNQUFBLEdBQUEsT0FBQSxDQUFBLG9CQUFBLENBQUE7O0FBQ0EsSUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQTs7QUFFQSxRQUFRLENBQUMscUJBQUQsRUFBd0IsWUFBQTtBQUM1QixFQUFBLEVBQUUsQ0FBRSw2Q0FBRixFQUFpRCxZQUFBO0FBQy9DLElBQUEsTUFBTSxDQUFFLE9BQUEsQ0FBQSxPQUFBLENBQWdCLFFBQWxCLENBQU4sQ0FBa0MsR0FBbEMsQ0FBc0MsV0FBdEM7QUFDQSxRQUFNLE9BQU8sR0FBSSxPQUFBLENBQUEsT0FBQSxDQUFnQixXQUFoQixDQUE0QixLQUE1QixDQUFqQjtBQUNBLElBQUEsTUFBTSxDQUFDLE9BQUQsQ0FBTixDQUFnQixjQUFoQixDQUErQixPQUFBLENBQUEsT0FBL0I7QUFDQSxJQUFBLE1BQU0sQ0FBRSxPQUFBLENBQUEsT0FBQSxDQUFnQixRQUFsQixDQUFOLENBQWtDLGNBQWxDLENBQWlELE9BQUEsQ0FBQSxPQUFqRDtBQUNILEdBTEMsQ0FBRjtBQU9BLEVBQUEsRUFBRSxDQUFFLHNCQUFGLEVBQTBCLFlBQUE7QUFDeEIsUUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFBLENBQUEsT0FBSixDQUFZLEtBQVosQ0FBaEI7QUFDQSxRQUFNLGFBQWEsR0FBRztBQUNsQixNQUFBLE1BQU0sRUFBRSxLQURVO0FBRWxCLE1BQUEsTUFBTSxFQUFFLEtBRlU7QUFHbEIsTUFBQSxPQUFPLEVBQUU7QUFIUyxLQUF0QjtBQUtBLElBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFMLENBQWUsYUFBZixDQUFELENBQU4sQ0FBc0MsSUFBdEMsQ0FBMkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFULENBQS9DO0FBQ0EsSUFBQSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQVQsQ0FBTixDQUFxQixjQUFyQixDQUFvQyxNQUFBLENBQUEsT0FBcEM7QUFDQSxJQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBVCxDQUFOLENBQXFCLGNBQXJCLENBQW9DLE1BQUEsQ0FBQSxPQUFwQztBQUNBLElBQUEsTUFBTSxDQUFFLE9BQUEsQ0FBQSxPQUFBLENBQWdCLFdBQWhCLENBQTRCLEtBQTVCLENBQUYsQ0FBTixDQUE0QyxjQUE1QyxDQUEyRCxPQUFBLENBQUEsT0FBM0Q7QUFDQSxJQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBVCxDQUFOLENBQXVCLGNBQXZCLENBQXNDLE9BQUEsQ0FBQSxVQUF0QztBQUNBLElBQUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFULENBQU4sQ0FBNEIsY0FBNUIsQ0FBMkMsT0FBQSxDQUFBLGVBQTNDO0FBQ0gsR0FiQyxDQUFGO0FBZ0JBLEVBQUEsRUFBRSxDQUFDLDBDQUFELEVBQTZDLFlBQUE7QUFDM0MsUUFBSTtBQUNBLFVBQUksT0FBQSxDQUFBLE9BQUo7QUFDQSxNQUFBLE1BQU0sQ0FBQyxJQUFELENBQU4sQ0FBYSxJQUFiLENBQWtCLEtBQWxCO0FBQ0gsS0FIRCxDQUdFLE9BQU8sR0FBUCxFQUFZO0FBQ1YsTUFBQSxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQUwsQ0FBTixDQUFvQixJQUFwQixDQUF5Qiw4REFBekI7QUFDQSxNQUFBLE1BQU0sQ0FBQyxHQUFELENBQU4sQ0FBWSxjQUFaLENBQTJCLEtBQTNCO0FBQ0g7QUFDSixHQVJDLENBQUY7QUFVQSxFQUFBLEVBQUUsQ0FBQyxvQ0FBRCxFQUF1QyxZQUFBO0FBQ3JDLFFBQU0sT0FBTyxHQUFHLElBQUksT0FBQSxDQUFBLE9BQUosQ0FBWSxLQUFaLENBQWhCO0FBQ0EsUUFBTSxRQUFRLEdBQUcsSUFBSSxPQUFBLENBQUEsT0FBSixDQUFZLEtBQVosQ0FBakI7QUFDQSxRQUFNLFFBQVEsR0FBRyxJQUFJLE9BQUEsQ0FBQSxPQUFKLENBQVksS0FBWixDQUFqQjtBQUVBLElBQUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFULENBQU4sQ0FBdUIsSUFBdkIsQ0FBNEIsUUFBUSxDQUFDLE1BQXJDO0FBQ0EsSUFBQSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQVQsQ0FBTixDQUF1QixHQUF2QixDQUEyQixJQUEzQixDQUFnQyxRQUFRLENBQUMsTUFBekM7QUFFQSxJQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVCxDQUFOLENBQTRCLElBQTVCLENBQWlDLFFBQVEsQ0FBQyxXQUExQztBQUNBLElBQUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFULENBQU4sQ0FBNEIsR0FBNUIsQ0FBZ0MsSUFBaEMsQ0FBcUMsUUFBUSxDQUFDLFdBQTlDO0FBQ0gsR0FWQyxDQUFGO0FBV0gsQ0E3Q08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGplc3QtZW52aXJvbm1lbnQganNkb21cbiAqL1xuaW1wb3J0IHsgVGVzdFNkayB9IGZyb20gJy4uL21vY2tzJztcbmltcG9ydCB7IFVzZXJBcGkgfSBmcm9tICcuLi8uLi9zcmMvYXBpL3VzZXInO1xuaW1wb3J0IHsgQXV0aEFwaSB9IGZyb20gJy4uLy4uL3NyYy9hcGkvYXV0aCc7XG5pbXBvcnQgeyBUZXN0SWZyYW1lLCBUZXN0VHJhbnNwb3J0ZXIgfSBmcm9tICcuLi9tb2Nrcyc7XG5cbmRlc2NyaWJlKCdJbml0aWFsaXplIEljZXRlYUlkJywgKCkgPT4ge1xuICAgIGl0ICgnR2V0IGluc3RhbmNlIHdpbGwgcmV0dXJuIGluc3RhbmNlIGlmIGl0IHNldCcsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KChUZXN0U2RrIGFzIGFueSkuaW5zdGFuY2UpLm5vdC50b0JlRGVmaW5lZCgpO1xuICAgICAgICBjb25zdCB0ZXN0U2RrID0gKFRlc3RTZGsgYXMgYW55KS5nZXRJbnN0YW5jZSgneHh4Jyk7XG4gICAgICAgIGV4cGVjdCh0ZXN0U2RrKS50b0JlSW5zdGFuY2VPZihUZXN0U2RrKTtcbiAgICAgICAgZXhwZWN0KChUZXN0U2RrIGFzIGFueSkuaW5zdGFuY2UpLnRvQmVJbnN0YW5jZU9mKFRlc3RTZGspO1xuICAgIH0pO1xuXG4gICAgaXQgKCdJbml0aWFsaXplIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgICAgY29uc3QgdGVzdFNkayA9IG5ldyBUZXN0U2RrKCd4eHgnKTtcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRTZGtJZCA9IHtcbiAgICAgICAgICAgIGFwaUtleTogJ3h4eCcsXG4gICAgICAgICAgICB0YXJnZXQ6ICd3ZWInLFxuICAgICAgICAgICAgYmFzZVVybDogJ2h0dHA6Ly8zay50aGV5ZG9udC53b3JrJyxcbiAgICAgICAgfTtcbiAgICAgICAgZXhwZWN0KEpTT04uc3RyaW5naWZ5KGV4cGVjdGVkU2RrSWQpKS50b0JlKGF0b2IodGVzdFNkay5zZGtJZCkpO1xuICAgICAgICBleHBlY3QodGVzdFNkay51c2VyKS50b0JlSW5zdGFuY2VPZihVc2VyQXBpKTtcbiAgICAgICAgZXhwZWN0KHRlc3RTZGsuYXV0aCkudG9CZUluc3RhbmNlT2YoQXV0aEFwaSk7XG4gICAgICAgIGV4cGVjdCgoVGVzdFNkayBhcyBhbnkpLmdldEluc3RhbmNlKCd4eHgnKSkudG9CZUluc3RhbmNlT2YoVGVzdFNkayk7XG4gICAgICAgIGV4cGVjdCh0ZXN0U2RrLmlmcmFtZSkudG9CZUluc3RhbmNlT2YoVGVzdElmcmFtZSk7XG4gICAgICAgIGV4cGVjdCh0ZXN0U2RrLnRyYW5zcG9ydGVyKS50b0JlSW5zdGFuY2VPZihUZXN0VHJhbnNwb3J0ZXIpO1xuICAgIH0pO1xuXG5cbiAgICBpdCgnSW5pdGlhbGl6ZSB3aXRob3V0IGFwaWtleSB3aWxsIHRocm93IGVycicsICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG5ldyBUZXN0U2RrKCk7XG4gICAgICAgICAgICBleHBlY3QodHJ1ZSkudG9CZShmYWxzZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZXhwZWN0KGVyci5tZXNzYWdlKS50b0JlKCdJY2V0ZWFJRCBFcnJvcjogW01JU1NJTkdfQVBJX0tFWV0gWW91IG11c3QgcHJvdmlkZSBhIGFwaSBrZXknKTtcbiAgICAgICAgICAgIGV4cGVjdChlcnIpLnRvQmVJbnN0YW5jZU9mKEVycm9yKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ0lzIHNhbWUgaW5zdGFuY2UgYmV0d2VlbiBlYWNoIGNhbGwnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRlc3RTZGsgPSBuZXcgVGVzdFNkaygneHh4Jyk7XG4gICAgICAgIGNvbnN0IHRlc3RTZGsyID0gbmV3IFRlc3RTZGsoJ2FhYScpO1xuICAgICAgICBjb25zdCB0ZXN0U2RrMyA9IG5ldyBUZXN0U2RrKCd4eHgnKTtcblxuICAgICAgICBleHBlY3QodGVzdFNkay5pZnJhbWUpLnRvQmUodGVzdFNkazMuaWZyYW1lKTtcbiAgICAgICAgZXhwZWN0KHRlc3RTZGsuaWZyYW1lKS5ub3QudG9CZSh0ZXN0U2RrMi5pZnJhbWUpO1xuXG4gICAgICAgIGV4cGVjdCh0ZXN0U2RrLnRyYW5zcG9ydGVyKS50b0JlKHRlc3RTZGszLnRyYW5zcG9ydGVyKTtcbiAgICAgICAgZXhwZWN0KHRlc3RTZGsudHJhbnNwb3J0ZXIpLm5vdC50b0JlKHRlc3RTZGsyLnRyYW5zcG9ydGVyKTtcbiAgICB9KTtcbn0pO1xuXG4iXX0=