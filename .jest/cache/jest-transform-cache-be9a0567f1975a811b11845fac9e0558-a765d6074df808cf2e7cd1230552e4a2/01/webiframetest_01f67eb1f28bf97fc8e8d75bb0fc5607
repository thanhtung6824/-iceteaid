1ead292f527bcb6d6aa8f47625411cee
"use strict";

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @jest-environment jsdom
 */

var mock_1 = require("./mock");

beforeEach(function () {
  var iframe = document.getElementById('aaa');

  if (iframe && iframe.parentNode) {
    iframe.parentNode.removeChild(iframe);
  }
});
it('Create Iframe correctly', function () {
  return __awaiter(void 0, void 0, void 0, function () {
    var iceteaId, iframe;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , mock_1.createWebIframe()];

        case 1:
          iceteaId = _a.sent();
          iframe = iceteaId.iframe;
          expect(iframe.id).toEqual('aaa');
          expect(iframe.getAttribute('src')).toEqual('xxx/web');
          expect(iframe.style.width).toEqual('640px');
          expect(iframe.style.height).toEqual('480px');
          expect(iframe.style.display).toEqual('none');
          return [2
          /*return*/
          ];
      }
    });
  });
});
it('Throw error if open, close iframe not ready', function () {
  return __awaiter(void 0, void 0, void 0, function () {
    var iceteaId, iframe;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , mock_1.createWebIframe()];

        case 1:
          iceteaId = _a.sent();
          iframe = document.getElementById('aaa');

          if (iframe && iframe.parentNode) {
            iframe.parentNode.removeChild(iframe);
          }

          try {
            iceteaId.openIframe();
          } catch (err) {
            expect(err).toBeInstanceOf(Error);
            expect(err.message).toBe('IceteaID Error: [VIEW_NOT_READY] View is not ready');
          }

          try {
            iceteaId.closeIframe();
          } catch (err) {
            expect(err).toBeInstanceOf(Error);
            expect(err.message).toBe('IceteaID Error: [VIEW_NOT_READY] View is not ready');
          }

          return [2
          /*return*/
          ];
      }
    });
  });
});
it('Open, Close Iframe when click', function () {
  return __awaiter(void 0, void 0, void 0, function () {
    var iceteaId, iframe;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , mock_1.createWebIframe()];

        case 1:
          iceteaId = _a.sent();
          iframe = iceteaId.iframe;
          iceteaId.openIframe();
          expect(iframe.style.display).toEqual('block');
          iceteaId.closeIframe();
          expect(iframe.style.display).toEqual('none');
          return [2
          /*return*/
          ];
      }
    });
  });
});
it('Is ready func worked', function () {
  return __awaiter(void 0, void 0, void 0, function () {
    var iceteaId, iframe, map;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , mock_1.createWebIframe()];

        case 1:
          iceteaId = _a.sent();
          iframe = iceteaId.iframe;
          map = {};
          iframe.addEventListener = jest.fn(function (event, cb) {
            map[event] = cb;
          });
          iceteaId.isReady();
          map.load();
          expect(iceteaId.isIframeReady).toEqual(true);
          return [2
          /*return*/
          ];
      }
    });
  });
});
it('Is ready will resolve when iframe loaded', function () {
  return __awaiter(void 0, void 0, void 0, function () {
    var iceteaId;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , mock_1.createWebIframe()];

        case 1:
          iceteaId = _a.sent();
          iceteaId.isIframeReady = true;
          return [4
          /*yield*/
          , expect(iceteaId.isReady()).resolves.toBe(true)];

        case 2:
          _a.sent();

          return [2
          /*return*/
          ];
      }
    });
  });
});
it('Didnt post message when view is not ready', function () {
  return __awaiter(void 0, void 0, void 0, function () {
    var iceteaId, err_1;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , mock_1.createWebIframe()];

        case 1:
          iceteaId = _a.sent();
          iceteaId.isReady = jest.fn(function () {
            return Promise.resolve();
          });
          iceteaId.iframe = undefined;
          _a.label = 2;

        case 2:
          _a.trys.push([2, 4,, 5]);

          return [4
          /*yield*/
          , iceteaId.postMessage(JSON.stringify({
            id: 123,
            msg: 'Here is test'
          }))];

        case 3:
          _a.sent();

          expect(true).toBe(false);
          return [3
          /*break*/
          , 5];

        case 4:
          err_1 = _a.sent();
          expect(err_1).toBeInstanceOf(Error);
          expect(err_1.message).toBe('IceteaID Error: [VIEW_NOT_READY] View is not ready');
          return [3
          /*break*/
          , 5];

        case 5:
          return [2
          /*return*/
          ];
      }
    });
  });
});
it('Will post message with expected arguments', function () {
  return __awaiter(void 0, void 0, void 0, function () {
    var iceteaId, mockPostmessage;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , mock_1.createWebIframe()];

        case 1:
          iceteaId = _a.sent();
          iceteaId.isReady = jest.fn(function () {
            return Promise.resolve();
          });
          mockPostmessage = jest.fn();
          iceteaId.iframe = {
            contentWindow: {
              postMessage: mockPostmessage
            }
          };
          return [4
          /*yield*/
          , iceteaId.postMessage(JSON.stringify({
            id: 123,
            msg: 'Here is test'
          }))];

        case 2:
          _a.sent();

          expect(mockPostmessage).toBeCalledWith(JSON.stringify({
            id: 123,
            msg: 'Here is test'
          }), 'xxx/web');
          return [2
          /*return*/
          ];
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,