4e904505b426322642cefc3ff3986114
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @jest-environment jsdom
 */

var auth_1 = require("../../../src/api/auth");

var mocks_1 = require("../../mocks");

var src_1 = require("../../../src");

describe('SendOtp run correctly', function () {
  var testSdk = new mocks_1.TestSdk('xxx');
  var testApi = new auth_1.AuthApi(testSdk);
  it('Work when pass parameter', function () {
    var mockPost = jest.fn();
    testApi.transporter.post = mockPost;
    testApi.sendOtp('abc', 'def');
    expect(mockPost).toBeCalledTimes(1);
  });
  it('Throw error when not pass parameter', function () {
    try {
      testApi.sendOtp();
      expect(true).toBe(false);
    } catch (err) {
      expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter EMAIL_OR_PHONE is required');
      expect(err).toBeInstanceOf(Error);
    }
  });
  it('Throw error when pass emailOrPhone and not pass channel', function () {
    try {
      testApi.sendOtp('abc');
      expect(true).toBe(false);
    } catch (err) {
      expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter CHANNEL is required');
      expect(err).toBeInstanceOf(Error);
    }
  });
  it('Throw error when not pass emailOrPhone and pass channel', function () {
    try {
      testApi.sendOtp('', 'abc');
      expect(true).toBe(false);
    } catch (err) {
      expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter EMAIL_OR_PHONE is required');
      expect(err).toBeInstanceOf(Error);
    }
  });
});
describe('VerifyOtp run correctly', function () {
  var testSdk = new mocks_1.TestSdk('xxx');
  var testApi = new auth_1.AuthApi(testSdk);
  it('Work when pass parameter', function () {
    var mockPost = jest.fn();
    testApi.transporter.post = mockPost;
    testApi.verifyOtp('abc', 'def');
    expect(mockPost).toBeCalledTimes(1);
  });
  it('Throw error when not pass parameter', function () {
    try {
      testApi.verifyOtp();
      expect(true).toBe(false);
    } catch (err) {
      expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter EMAIL_OR_PHONE is required');
      expect(err).toBeInstanceOf(Error);
    }
  });
  it('Throw error when pass emailOrPhone and not pass channel', function () {
    try {
      testApi.verifyOtp('abc');
      expect(true).toBe(false);
    } catch (err) {
      expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter CHANNEL is required');
      expect(err).toBeInstanceOf(Error);
    }
  });
  it('Throw error when not pass emailOrPhone and pass channel', function () {
    try {
      testApi.verifyOtp('', 'abc');
      expect(true).toBe(false);
    } catch (err) {
      expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter EMAIL_OR_PHONE is required');
      expect(err).toBeInstanceOf(Error);
    }
  });
});
describe('Login with google run correctly', function () {
  var testSdk = new mocks_1.TestSdk('xxx');
  var testApi = new auth_1.AuthApi(testSdk);
  it('Work when target is react-native', function () {
    var mockPost = jest.fn();
    testApi.transporter.post = mockPost;
    src_1.SdkConfiguration.target = 'react-native';
    testApi.loginWithGoogle();
    expect(mockPost).toBeCalledTimes(1);
  });
  it('Throw error when target is react-native and have redirect url', function () {
    try {
      src_1.SdkConfiguration.target = 'react-native';
      testApi.loginWithGoogle('redirect');
      expect(true).toBe(false);
    } catch (err) {
      expect(err.message).toBe('IceteaID Error: [INVALID_PARAMETER] Parameter REDIRECT_URI is invalid');
      expect(err).toBeInstanceOf(Error);
    }
  });
  it('Redirect when target is web', function () {
    src_1.SdkConfiguration.target = 'web';
    var sdkId = btoa(JSON.stringify({
      apiKey: 'xxx',
      target: 'web',
      baseUrl: 'http://3k.theydont.work'
    }));
    var url = "http://3k1.theydont.work/account/google?sdkId=" + sdkId + "&redirectUri=redirect";
    Object.defineProperty(window, 'location', {
      value: new URL(url)
    });
    testApi.loginWithGoogle('redirect');
    expect(window.location.href).toEqual(url);
  });
  it('Throw error when target is web and dont have redirect url', function () {
    try {
      src_1.SdkConfiguration.target = 'web';
      testApi.loginWithGoogle();
      expect(true).toBe(false);
    } catch (err) {
      expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter REDIRECT_URI is required');
      expect(err).toBeInstanceOf(Error);
    }
  });
});
describe('Logout run correctly', function () {
  var testSdk = new mocks_1.TestSdk('xxx');
  var testApi = new auth_1.AuthApi(testSdk);
  it('Worked', function () {
    var mockPost = jest.fn();
    testApi.transporter.post = mockPost;
    testApi.logout();
    expect(mockPost).toBeCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,