{"version":3,"sources":["/home/admin1/Desktop/@iceteaid/packages/core/test/api/auth/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @jest-environment jsdom\n */\nimport { AuthApi } from '../../../src/api/auth';\nimport { TestSdk } from '../../mocks';\nimport { SdkConfiguration } from '../../../src';\n\ndescribe('SendOtp run correctly', () => {\n    const testSdk = new TestSdk('xxx');\n    const testApi = new AuthApi(testSdk) as any;\n\n    it ('Work when pass parameter', () => {\n        const mockPost = jest.fn();\n        testApi.transporter.post = mockPost;\n        testApi.sendOtp('abc', 'def');\n        expect(mockPost).toBeCalledTimes(1);\n    });\n\n    it ('Throw error when not pass parameter', () => {\n        try {\n            testApi.sendOtp();\n            expect(true).toBe(false);\n        } catch (err) {\n            expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter EMAIL_OR_PHONE is required');\n            expect(err).toBeInstanceOf(Error);\n        }\n    });\n\n    it ('Throw error when pass emailOrPhone and not pass channel', () => {\n        try {\n            testApi.sendOtp('abc');\n            expect(true).toBe(false);\n        } catch (err) {\n            expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter CHANNEL is required');\n            expect(err).toBeInstanceOf(Error);\n        }\n    });\n\n    it ('Throw error when not pass emailOrPhone and pass channel', () => {\n        try {\n            testApi.sendOtp('', 'abc');\n            expect(true).toBe(false);\n        } catch (err) {\n            expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter EMAIL_OR_PHONE is required');\n            expect(err).toBeInstanceOf(Error);\n        }\n    });\n\n});\n\ndescribe('VerifyOtp run correctly', () => {\n    const testSdk = new TestSdk('xxx');\n    const testApi = new AuthApi(testSdk) as any;\n\n    it ('Work when pass parameter', () => {\n        const mockPost = jest.fn();\n        testApi.transporter.post = mockPost;\n        testApi.verifyOtp('abc', 'def');\n        expect(mockPost).toBeCalledTimes(1);\n    });\n\n    it ('Throw error when not pass parameter', () => {\n        try {\n            testApi.verifyOtp();\n            expect(true).toBe(false);\n        } catch (err) {\n            expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter EMAIL_OR_PHONE is required');\n            expect(err).toBeInstanceOf(Error);\n        }\n    });\n\n    it ('Throw error when pass emailOrPhone and not pass channel', () => {\n        try {\n            testApi.verifyOtp('abc');\n            expect(true).toBe(false);\n        } catch (err) {\n            expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter CHANNEL is required');\n            expect(err).toBeInstanceOf(Error);\n        }\n    });\n\n    it ('Throw error when not pass emailOrPhone and pass channel', () => {\n        try {\n            testApi.verifyOtp('', 'abc');\n            expect(true).toBe(false);\n        } catch (err) {\n            expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter EMAIL_OR_PHONE is required');\n            expect(err).toBeInstanceOf(Error);\n        }\n    });\n});\n\ndescribe('Login with google run correctly', () => {\n    const testSdk = new TestSdk('xxx');\n    const testApi = new AuthApi(testSdk) as any;\n    it ('Work when target is react-native', () => {\n        const mockPost = jest.fn();\n        testApi.transporter.post = mockPost;\n\n        SdkConfiguration.target = 'react-native';\n        testApi.loginWithGoogle();\n        expect(mockPost).toBeCalledTimes(1);\n    });\n\n    it ('Throw error when target is react-native and have redirect url', () => {\n        try {\n            SdkConfiguration.target = 'react-native';\n            testApi.loginWithGoogle('redirect');\n            expect(true).toBe(false);\n\n        } catch (err) {\n            expect(err.message).toBe('IceteaID Error: [INVALID_PARAMETER] Parameter REDIRECT_URI is invalid');\n            expect(err).toBeInstanceOf(Error);\n        }\n    });\n\n    it ('Redirect when target is web', () => {\n        SdkConfiguration.target = 'web';\n        const sdkId = btoa(JSON.stringify({\n            apiKey: 'xxx',\n            target: 'web',\n            baseUrl: 'http://3k.theydont.work'\n        }));\n        const url = `http://3k1.theydont.work/account/google?sdkId=${sdkId}&redirectUri=redirect`;\n        Object.defineProperty(window, 'location', {\n            value: new URL(url)\n        } );\n        testApi.loginWithGoogle('redirect');\n        expect(window.location.href).toEqual(url);\n    });\n\n    it ('Throw error when target is web and dont have redirect url', () => {\n        try {\n            SdkConfiguration.target = 'web';\n            testApi.loginWithGoogle();\n            expect(true).toBe(false);\n\n        } catch (err) {\n            expect(err.message).toBe('IceteaID Error: [MISSING_PARAMETER] Parameter REDIRECT_URI is required');\n            expect(err).toBeInstanceOf(Error);\n        }\n    });\n});\n\ndescribe('Logout run correctly', () => {\n    const testSdk = new TestSdk('xxx');\n    const testApi = new AuthApi(testSdk) as any;\n\n    it('Worked', () => {\n        const mockPost = jest.fn();\n        testApi.transporter.post = mockPost;\n        testApi.logout();\n        expect(mockPost).toBeCalledTimes(1);\n    });\n});"]}